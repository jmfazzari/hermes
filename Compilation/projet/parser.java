
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 09 23:04:03 CET 2016
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.InputStreamReader;
import java.util.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 09 23:04:03 CET 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\007\002\000\002\010\002" +
    "\000\002\011\002\000\002\004\010\000\002\005\004\000" +
    "\002\005\002\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\026\000\006\002\ufffe\004\ufffd\001\002\000\004\004" +
    "\012\001\002\000\004\002\001\001\002\000\004\002\011" +
    "\001\002\000\006\002\ufffe\004\ufffd\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\000\001\002\000\014\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\001\002\000\014\005" +
    "\ufff8\006\020\007\014\010\017\011\016\001\002\000\004" +
    "\012\030\001\002\000\004\005\ufffb\001\002\000\004\012" +
    "\025\001\002\000\004\012\024\001\002\000\004\012\023" +
    "\001\002\000\014\005\ufff8\006\020\007\014\010\017\011" +
    "\016\001\002\000\004\005\ufff9\001\002\000\014\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\001\002\000\014\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\001\002\000\014" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\001\002\000" +
    "\004\005\027\001\002\000\006\002\ufffa\004\ufffa\001\002" +
    "\000\014\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\026\000\012\002\005\003\004\004\006\007\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\007\004\006\007\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\012\001\001\000\006" +
    "\005\014\006\020\001\001\000\002\001\001\000\004\011" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\021\006\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static void main(String args[]) throws Exception {
        new parser(new Yylex(new InputStreamReader(System.in))).parse();
    }	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    public String Tlivre[];
    int nbLivre=0;
    int cpt;
    String tete;
    String corps="";
    String pied;
    public void ecritLigne(){

        tete = "<!DOCTYPE html>\n";
        tete = tete + "<html>\n";
        tete = tete + "\t<head>\n";
        tete = tete + "\t\t<title>Ma bibliothèque</title>\n";
        tete = tete + "\t</head>\n";
        tete = tete + "\t<body>\n";
        tete = tete + "\t\t<p>J'ai une chouette bibliothèque !</p>\n";
        tete = tete + "\t\t<table border=1 cellspacing=1 cellpadding=5>\n\t\t\t<tr>\n";
        tete = tete + "\t\t\t\t<td><b>Titre</b></td>\n";
        tete = tete + "\t\t\t\t<td><b>Auteur</b></td>\n";
        tete = tete + "\t\t\t\t<td><b>Type</b></td>\n";
        tete = tete + "\t\t\t\t<td><b>Critique</b></td>\n\t\t\t</tr>\n";

        pied = "\t\t</table>\n";
        pied = pied + "\t\t<p>Ma bibliothèque contient "+nbLivre+" livres, je suis bien content !</p>\n";
        pied = pied + "\t</body>\n";
        pied = pied + "</html>\n";

        try{
          File f = new File("projet.htm");//0
          FileWriter fw = new FileWriter(f, true);
          fw.write(tete+corps+pied);
          fw.close();
        }catch(IOException e){
        }
        
    }
    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // champ ::= CRITIQUE CHAINE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Tlivre[3]=(String)a ;cpt += 8; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("champ",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // champ ::= TYPE CHAINE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Tlivre[2]=(String)a ;cpt += 4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("champ",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // champ ::= AUTEURS CHAINE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Tlivre[1]=(String)a ;cpt += 2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("champ",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // champ ::= TITRE CHAINE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Tlivre[0]=(String)a ;cpt += 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("champ",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // champs ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("champs",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // champs ::= champ champs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("champs",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // livre ::= NT$0 ACOLOUV NT$1 champs NT$2 ACOLFERM 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            	nbLivre++;
            	//erreurs sur les champs
            	switch (cpt) {
					case 1 :
						System.out.println("vous n'avez pas entrée l'auteur, le type, la critique sur l'entrée n°"+nbLivre);
						break;
					case 2 :
						System.out.println("vous n'avez pas entrée le titre, le type, la critique sur l'entrée n°"+nbLivre);
						break;
					case 3 :
						System.out.println("vous n'avez pas entrée le type, la critique sur l'entrée n°"+nbLivre);
						break;
					case 4 :
						System.out.println("vous n'avez pas entrée le titre, l'auteur, la critique sur l'entrée n°"+nbLivre);
						break;
					case 5 :
						System.out.println("vous n'avez pas entrée l'auteur, la critique sur l'entrée n°"+nbLivre);
						break;
					case 6 :
						System.out.println("vous n'avez pas entrée le titre, le type sur l'entrée n°"+nbLivre);
						break;
					case 7 :
						System.out.println("vous n'avez pas entrée la critique sur l'entrée n°"+nbLivre);
						break;
					case 8 :
						System.out.println("vous n'avez pas entrée le titre, l'auteur, le type sur l'entrée n°"+nbLivre);
						break;
					case 9 :
						System.out.println("vous n'avez pas entrée l'auteur, le type sur l'entrée n°"+nbLivre);
						break;
					case 10 :
						System.out.println("vous n'avez pas entrée le titre, le type sur l'entrée n°"+nbLivre);
						break;
					case 11 :
						System.out.println("vous n'avez pas entrée le type sur l'entrée n°"+nbLivre);
						break;	
					case 12 :
						System.out.println("vous n'avez pas entrée le titre, l'auteur sur l'entrée n°"+nbLivre);
						break;				
					case 13 :
						System.out.println("vous n'avez pas entrée l'auteur sur l'entrée n°"+nbLivre);
						break;
					case 14 :
						System.out.println("vous n'avez pas entrée le titre sur l'entrée n°"+nbLivre);
						break;
					case 15 :
						break;
					default:
						System.out.println("vous avez trop d'entrées sur l'entrée n°"+nbLivre);
						break; 
				}
            
            
                // édition du livre
                corps = corps + "\t\t\t<tr>\n";
                for(int j=0;j<4;j++){
                    corps = corps + "\t\t\t\t<td>"+Tlivre[j]+"</td>\n";
                }
                corps = corps + "\t\t\t</tr>\n";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("livre",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
   
					
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  cpt = 0; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
 Tlivre=new String[4];
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiome ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiome",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // axiome ::= livre axiome 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiome",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= axiomeprime EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // axiomeprime ::= axiome 
            {
              Object RESULT =null;
		 ecritLigne(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiomeprime",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

