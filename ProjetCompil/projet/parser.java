
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 11 22:59:23 CET 2016
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java.util.*;
import java.text.SimpleDateFormat;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 11 22:59:23 CET 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\047\002\000\002\002\011\000\002\002" +
    "\004\000\002\050\002\000\002\003\006\000\002\051\002" +
    "\000\002\007\005\000\002\007\002\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\036\005\000\002" +
    "\012\004\000\002\013\005\000\002\013\002\000\002\011" +
    "\010\000\002\052\002\000\002\034\012\000\002\053\002" +
    "\000\002\045\005\000\002\046\005\000\002\046\002\000" +
    "\002\054\002\000\002\004\006\000\002\055\002\000\002" +
    "\014\005\000\002\014\002\000\002\040\005\000\002\056" +
    "\002\000\002\015\005\000\002\057\002\000\002\016\006" +
    "\000\002\016\002\000\002\060\002\000\002\005\006\000" +
    "\002\061\002\000\002\062\002\000\002\017\014\000\002" +
    "\017\002\000\002\020\004\000\002\020\002\000\002\021" +
    "\003\000\002\021\003\000\002\021\005\000\002\021\010" +
    "\000\002\021\006\000\002\063\002\000\002\064\002\000" +
    "\002\022\017\000\002\044\004\000\002\065\002\000\002" +
    "\044\007\000\002\066\002\000\002\067\002\000\002\023" +
    "\014\000\002\037\003\000\002\037\003\000\002\037\004" +
    "\000\002\037\003\000\002\042\005\000\002\042\002\000" +
    "\002\041\003\000\002\041\003\000\002\041\005\000\002" +
    "\043\005\000\002\043\002\000\002\070\002\000\002\071" +
    "\002\000\002\006\007\000\002\024\004\000\002\024\002" +
    "\000\002\025\006\000\002\025\006\000\002\033\004\000" +
    "\002\033\006\000\002\026\004\000\002\027\005\000\002" +
    "\027\002\000\002\035\004\000\002\035\006\000\002\030" +
    "\015\000\002\031\004\000\002\032\005\000\002\032\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\004\004\001\001\002\000\004\002\277\001" +
    "\002\000\004\004\006\001\002\000\004\006\007\001\002" +
    "\000\012\007\ufffe\020\ufffe\056\ufffe\060\ufffe\001\002\000" +
    "\004\010\012\001\002\000\004\012\034\001\002\000\006" +
    "\011\uffeb\031\uffeb\001\002\000\006\011\uffe7\031\015\001" +
    "\002\000\004\011\032\001\002\000\004\041\021\001\002" +
    "\000\006\011\uffe9\031\uffe9\001\002\000\006\011\uffe7\031" +
    "\015\001\002\000\004\011\uffe8\001\002\000\006\042\uffe5" +
    "\043\uffe5\001\002\000\004\042\023\001\002\000\006\011" +
    "\uffe6\031\uffe6\001\002\000\006\042\uffe1\043\026\001\002" +
    "\000\004\042\uffe4\001\002\000\004\041\027\001\002\000" +
    "\006\042\uffe3\043\uffe3\001\002\000\006\042\uffe1\043\026" +
    "\001\002\000\004\042\uffe2\001\002\000\004\012\uffea\001" +
    "\002\000\004\016\150\001\002\000\006\013\uffe0\014\uffe0" +
    "\001\002\000\006\013\uffdb\014\036\001\002\000\004\041" +
    "\041\001\002\000\004\013\040\001\002\000\004\016\uffdf" +
    "\001\002\000\004\052\uffde\001\002\000\004\052\043\001" +
    "\002\000\016\015\uffd9\022\052\026\044\036\054\041\046" +
    "\057\051\001\002\000\004\041\127\001\002\000\024\015" +
    "\uffd7\022\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7\036\uffd7" +
    "\041\uffd7\057\uffd7\001\002\000\004\042\124\001\002\000" +
    "\024\015\uffd9\022\052\024\uffd9\025\uffd9\026\044\030\uffd9" +
    "\036\054\041\046\057\051\001\002\000\024\015\uffd8\022" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\030\uffd8\036\uffd8\041\uffd8" +
    "\057\uffd8\001\002\000\004\041\121\001\002\000\004\045" +
    "\076\001\002\000\004\015\uffdd\001\002\000\004\045\055" +
    "\001\002\000\006\037\060\041\056\001\002\000\010\042" +
    "\067\043\uffc3\046\uffc3\001\002\000\006\043\061\046\uffc5" +
    "\001\002\000\006\043\uffc4\046\uffc4\001\002\000\006\037" +
    "\060\041\056\001\002\000\004\046\063\001\002\000\004" +
    "\044\064\001\002\000\024\015\uffd5\022\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\030\uffd5\036\uffd5\041\uffd5\057\uffd5\001\002" +
    "\000\006\043\061\046\uffc5\001\002\000\004\046\uffc6\001" +
    "\002\000\004\055\070\001\002\000\006\043\uffc2\046\uffc2" +
    "\001\002\000\004\015\072\001\002\000\004\041\073\001" +
    "\002\000\004\052\074\001\002\000\006\013\uffdb\014\036" +
    "\001\002\000\004\013\uffdc\001\002\000\004\041\077\001" +
    "\002\000\004\042\uffd3\001\002\000\004\042\101\001\002" +
    "\000\004\055\102\001\002\000\004\053\103\001\002\000" +
    "\004\035\104\001\002\000\004\046\105\001\002\000\004" +
    "\023\106\001\002\000\020\022\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\036\uffd2\041\uffd2\057\uffd2\001\002\000\020\022\052" +
    "\024\uffd9\025\uffd9\026\044\036\054\041\046\057\051\001" +
    "\002\000\006\024\111\025\113\001\002\000\016\022\uffcf" +
    "\025\uffcf\026\uffcf\036\uffcf\041\uffcf\057\uffcf\001\002\000" +
    "\024\015\uffd1\022\uffd1\024\uffd1\025\uffd1\026\uffd1\030\uffd1" +
    "\036\uffd1\041\uffd1\057\uffd1\001\002\000\004\044\114\001" +
    "\002\000\024\015\uffd0\022\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\030\uffd0\036\uffd0\041\uffd0\057\uffd0\001\002\000\016\022" +
    "\052\025\uffd9\026\044\036\054\041\046\057\051\001\002" +
    "\000\004\025\117\001\002\000\004\044\120\001\002\000" +
    "\024\015\uffce\022\uffce\024\uffce\025\uffce\026\uffce\030\uffce" +
    "\036\uffce\041\uffce\057\uffce\001\002\000\004\044\122\001" +
    "\002\000\024\015\uffd6\022\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\030\uffd6\036\uffd6\041\uffd6\057\uffd6\001\002\000\012\015" +
    "\uffda\024\uffda\025\uffda\030\uffda\001\002\000\004\034\125" +
    "\001\002\000\004\044\126\001\002\000\024\015\uffd4\022" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\030\uffd4\036\uffd4\041\uffd4" +
    "\057\uffd4\001\002\000\004\054\uffcd\001\002\000\004\054" +
    "\131\001\002\000\012\003\134\020\136\041\132\060\133" +
    "\001\002\000\004\027\uffc9\001\002\000\006\027\uffc0\045" +
    "\144\001\002\000\004\027\uffc7\001\002\000\004\027\137" +
    "\001\002\000\004\027\uffca\001\002\000\016\022\uffcc\026" +
    "\uffcc\030\uffcc\036\uffcc\041\uffcc\057\uffcc\001\002\000\016" +
    "\022\052\026\044\030\uffd9\036\054\041\046\057\051\001" +
    "\002\000\004\030\142\001\002\000\004\044\143\001\002" +
    "\000\024\015\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\030" +
    "\uffcb\036\uffcb\041\uffcb\057\uffcb\001\002\000\004\021\146" +
    "\001\002\000\004\027\uffc8\001\002\000\004\046\147\001" +
    "\002\000\004\027\uffc1\001\002\000\010\017\uffbf\032\uffbf" +
    "\033\uffbf\001\002\000\004\005\152\001\002\000\004\002" +
    "\000\001\002\000\010\017\uffbb\032\157\033\154\001\002" +
    "\000\004\041\214\001\002\000\010\017\uffbb\032\157\033" +
    "\154\001\002\000\004\017\uffbe\001\002\000\004\041\160" +
    "\001\002\000\004\047\161\001\002\000\006\045\165\050" +
    "\164\001\002\000\004\042\210\001\002\000\010\017\uffb9" +
    "\032\uffb9\033\uffb9\001\002\000\004\045\165\001\002\000" +
    "\004\040\166\001\002\000\004\043\167\001\002\000\004" +
    "\040\170\001\002\000\004\043\171\001\002\000\004\040" +
    "\172\001\002\000\004\043\173\001\002\000\004\040\174" +
    "\001\002\000\004\043\175\001\002\000\004\040\176\001" +
    "\002\000\004\046\177\001\002\000\010\042\uffb1\043\uffb1" +
    "\051\uffb1\001\002\000\004\051\206\001\002\000\006\043" +
    "\202\051\uffae\001\002\000\004\045\165\001\002\000\004" +
    "\051\uffb0\001\002\000\006\043\202\051\uffae\001\002\000" +
    "\004\051\uffaf\001\002\000\004\042\207\001\002\000\010" +
    "\017\uffb2\032\uffb2\033\uffb2\001\002\000\010\017\uffb3\032" +
    "\uffb3\033\uffb3\001\002\000\004\017\212\001\002\000\004" +
    "\005\uffbd\001\002\000\004\017\uffbc\001\002\000\004\047" +
    "\215\001\002\000\006\041\216\050\220\001\002\000\004" +
    "\042\231\001\002\000\010\017\uffba\032\uffba\033\uffba\001" +
    "\002\000\004\041\221\001\002\000\006\043\226\051\uffb4" +
    "\001\002\000\004\051\223\001\002\000\004\042\224\001" +
    "\002\000\010\017\uffb7\032\uffb7\033\uffb7\001\002\000\004" +
    "\051\uffb6\001\002\000\004\041\227\001\002\000\006\043" +
    "\226\051\uffb4\001\002\000\004\051\uffb5\001\002\000\010" +
    "\017\uffb8\032\uffb8\033\uffb8\001\002\000\012\007\ufffa\020" +
    "\240\056\234\060\235\001\002\000\012\007\ufff7\020\ufff7" +
    "\056\ufff7\060\ufff7\001\002\000\004\041\262\001\002\000" +
    "\004\045\255\001\002\000\012\007\ufffc\020\ufffc\056\ufffc" +
    "\060\ufffc\001\002\000\004\007\252\001\002\000\004\041" +
    "\243\001\002\000\012\007\ufff8\020\ufff8\056\ufff8\060\ufff8" +
    "\001\002\000\012\007\ufff9\020\ufff9\056\ufff9\060\ufff9\001" +
    "\002\000\006\042\ufff3\043\247\001\002\000\004\042\245" +
    "\001\002\000\012\007\ufff6\020\ufff6\056\ufff6\060\ufff6\001" +
    "\002\000\004\042\ufff5\001\002\000\004\041\250\001\002" +
    "\000\006\042\ufff3\043\247\001\002\000\004\042\ufff4\001" +
    "\002\000\004\010\ufffd\001\002\000\012\007\ufffa\020\240" +
    "\056\234\060\235\001\002\000\004\007\ufffb\001\002\000" +
    "\004\021\256\001\002\000\004\046\257\001\002\000\004" +
    "\041\243\001\002\000\004\042\261\001\002\000\012\007" +
    "\ufff2\020\ufff2\056\ufff2\060\ufff2\001\002\000\004\047\ufff1" +
    "\001\002\000\004\047\264\001\002\000\004\050\265\001" +
    "\002\000\004\041\266\001\002\000\006\043\uffef\051\uffef" +
    "\001\002\000\004\051\270\001\002\000\004\042\271\001" +
    "\002\000\012\007\ufff0\020\ufff0\056\ufff0\060\ufff0\001\002" +
    "\000\006\043\274\051\uffec\001\002\000\004\051\uffee\001" +
    "\002\000\004\041\275\001\002\000\006\043\274\051\uffec" +
    "\001\002\000\004\051\uffed\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\006\002\003\047\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\007\001\001\000\004" +
    "\050\231\001\001\000\004\004\010\001\001\000\004\005" +
    "\032\001\001\000\004\054\012\001\001\000\006\014\013" +
    "\040\015\001\001\000\002\001\001\000\004\015\021\001" +
    "\001\000\004\055\016\001\001\000\006\014\017\040\015" +
    "\001\001\000\002\001\001\000\004\056\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\027\001" +
    "\001\000\004\016\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\150\001\001\000\004\060\034\001" +
    "\001\000\004\017\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\041\001\001\000" +
    "\002\001\001\000\012\020\052\021\046\022\047\023\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\122\021\046\022\047\023\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\070\001\001\000\002\001\001\000\004\041\056" +
    "\001\001\000\002\001\001\000\004\042\061\001\001\000" +
    "\002\001\001\000\004\041\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\106\001\001\000\012\020" +
    "\107\021\046\022\047\023\044\001\001\000\004\044\111" +
    "\001\001\000\004\065\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\115\021\046" +
    "\022\047\023\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\127\001\001\000\002\001\001" +
    "\000\004\037\134\001\001\000\002\001\001\000\004\043" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\067\137\001\001\000\012\020\140\021" +
    "\046\022\047\023\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\155\025\154\001\001\000\002\001\001\000\006\024\212" +
    "\025\154\001\001\000\004\071\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\161\035\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\200\031" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\202\001\001\000\004\030\203\001\001\000\002" +
    "\001\001\000\004\032\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\221\001\001\000\004\027\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\236" +
    "\010\235\011\240\034\232\036\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\252" +
    "\001\001\000\002\001\001\000\004\012\243\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\250\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\253\010\235\011\240\034" +
    "\232\036\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\266\001\001\000" +
    "\004\053\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\275\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public static String[] fichier = new String[2];
  public static String[] cheminFichier = new String[2];
  public int numCMaisonUser =  0;
  public int numHabitatSpecific = 1;
  public String[] chaine = new String[5];
  public String guillemet = "\"";
  public HashMap<String,String> motsCle = new HashMap<String,String>();
  ArrayList <String>listeIdent = new ArrayList<String>();
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd/HH/mm");

	public static void main(String args[]) throws Exception {
        new parser(new Yylex(new InputStreamReader(System.in))).parse();
//		new parser(new Yylex(System.in)).parse();
	}

	public void syntax_error(Symbol cur_token) { 
		// n'interrompt pas la compil... 
		// on est par defaut dans l'etat error qui permet ensuite la recup
		// par d�faut : report_error("syntax error", null);
		report_error("Syntaxe incorrecte <"+tokenToString(cur_token)+">", null);        
	}

	public void report_error(String message, Object info) {   
		// n'interrompt pas la compil
		if (info == null) System.err.println("Mon erreur <"+ ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " + message);
		else System.err.println("Mon erreur <"+ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " +message+" : "+info);
		System.err.println("-> mais on continue l'analyse... ");
	}

	public void unrecovered_syntax_error(Symbol cur_token) {
    	// par defaut : report_fatal_error("Couldn't repair and continue parse", null);
		// on n'a pas reussi a faire de la recup
		report_fatal_error("Recuperation impossible <"+tokenToString(cur_token)+">", null);   // interrompt la compil     
	}

	public void report_fatal_error(String message, Object info) {  
		// qd cette fct est appelee, message vaut par defaut "Couldn't repair and continue parse"
		String m = "Mon erreur fatale <"+ ptext()+ "> ligne " + pline() + ", colonne " + pcolumn() + " : " + message;
		if (info == null) System.err.println(m);
		else System.err.println(m+" : "+info);
		System.err.println("-> arr�t de l'analyse...");
		done_parsing(); // interrompt la compil
  	}

	public int pline(){
		return ((Yylex)getScanner()).getYyLine();
	}
	public int pcolumn(){
		return ((Yylex)getScanner()).getYyColumn();
	}
	public String ptext(){
		return ((Yylex)getScanner()).getYyText();
	}


public String tokenToString (Symbol token) {
  switch (token.sym) {
    case sym.t_BAL_PROG_OUV  :  return "t_BAL_PROG_OUV "; 
    case sym.t_autre_appareil  :  return "t_autre_appareil";  
    case sym.t_BAL_PROG_FER  :  return "t_BAL_PROG_FER "; 
    case sym.t_DECLA_APP_OUV  :  return "t_DECLA_APP_OUV "; 
    case sym.t_DECLA_APP_FER  :  return "t_DECLA_APP_FER "; 
    case sym.t_DECLA_INT_OUV  :  return "t_DECLA_INT_OUV "; 
    case sym.t_DECLA_INT_FER  :  return "t_DECLA_INT_FER "; 
    case sym.t_DECLA_SCE_OUV  :  return "t_DECLA_SCE_OUV "; 
    case sym.t_DECLA_SCE_FER  :  return "t_DECLA_SCE_FER "; 
    case sym.t_SCE_OUV  :  return "t_SCE_OUV "; 
    case sym.t_SCE_FER  :  return "t_SCE_FER "; 
    case sym.t_DECLA_COM_OUV  :  return "t_DECLA_COM_OUV "; 
    case sym.t_DECLA_COM_FER  :  return "t_DECLA_COM_FER "; 
    case sym.t_Type  :  return "t_Type "; 
    case sym.t_sous_Type  :  return "t_sous_Type "; 
    case sym.SI  :  return "SI "; 
    case sym.ALORS  :  return "ALORS "; 
    case sym.SINON  :  return "SINON "; 
    case sym.FSI  :  return "FSI "; 
    case sym.POURTOUT  :  return "POURTOUT "; 
    case sym.FAIRE  :  return "FAIRE "; 
    case sym.FAIT  :  return "FAIT "; 
    case sym.t_Interface  :  return "t_Interface "; 
    case sym.PROGRAMMER  :  return "PROGRAMMER "; 
    case sym.ASSOCIER  :  return "ASSOCIER "; 
    case sym.t_action  :  return "t_action "; 
    case sym.t_etat  :  return "t_etat "; 
    case sym.t_message  :  return "t_message "; 
    case sym.t_texte  :  return "t_texte "; 
    case sym.t_date  :  return "t_date "; 
    case sym.t_ident  :  return "t_ident "; 
    case sym.POINT  :  return "POINT "; 
    case sym.VIRGULE  :  return "VIRGULE "; 
    case sym.POINTVIRGULE  :  return "POINTVIRGULE "; 
    case sym.PAROUV  :  return "PAROUV "; 
    case sym.PARFERM  :  return "PARFERM "; 
    case sym.EGAL  :  return "EGAL "; 
    case sym.CROCHETOUV  :  return "CROCHETOUV "; 
    case sym.CROCHETFERM  :  return "CROCHETFERM "; 
    case sym.PGQ  :  return "PGQ "; 
    case sym.t_comparateurs  :  return "t_comparateurs "; 
    case sym.DEUXPOINTS  :  return "DEUXPOINTS "; 
    case sym.ETAT  :  return "ETAT "; 
    case sym.DEFINIR  :  return "DEFINIR "; 
    case sym.t_executer_scenario  :  return "t_executer_scenario "; 
	default : return "-Token impr�vu ou error";
	}
}
/*****************************************************************JB*/

/* retourne faux si d�j� existant, sinon enregistre le nouvel �l�ment */

  public boolean isUniqueIdent(String st, int ligne, int colonne){
    for (int i = 0; i<listeIdent.size();i++){
      if (st.compareTo(listeIdent.get(i)) == 0){
      //  System.out.println("Erreur a la ligne "+ligne+", colone "+colonne+".");
      //  System.out.println("L'ident '"+st+"' existe deja");
        return false;
      }
    }
    listeIdent.add(st);
  return true;
  }

/*****************************************************************JB*/

/* retourne faux si la date est incorrecte */

  public boolean isDateCorrect(String an, String mois, String jour,String heure,String minute){
  sdf.setLenient(false);
    if (an.compareTo("_") == 0) an ="1";
    if (mois.compareTo("_") == 0) mois ="1";  
    if (jour.compareTo("_") == 0) jour ="1";
    if (heure.compareTo("_") == 0) heure ="1";
    if (minute.compareTo("_") == 0) minute ="1";
		String s = an+"/"+mois+"/"+jour+"/"+heure+"/"+minute;
		try {
		Date d = sdf.parse(s);		
		} catch (Exception e) {
		return false;
		}
  return true;
  }
  
 /********************************************************************/ 


  public void ecritLigne(String chaine, int numFichier){
    switch(numFichier){
      case(-1):
        System.out.println(chaine);
        break;
      default:
        try{
          File f = new File(cheminFichier[numFichier]);
          FileWriter fw = new FileWriter(f, true);
          fw.write(chaine);
          fw.close();
        }catch(IOException exception){
          System.out.println("Erreur de fichier : "+exception.toString());
        }
        break;
    }
  }
  
 public void debutFichier(){
    
    fichier[numCMaisonUser]  = "public class CMaisonUser extends CMaison {\n";
    fichier[numCMaisonUser] += "  public CMaisonUser() {\n";
    fichier[numCMaisonUser] += "  super();\n";
    //**************************************************************    
    fichier[numHabitatSpecific]  = "// HabitatSpecific.java\n";
    fichier[numHabitatSpecific] += "import java.util.ArrayList;\n";
    fichier[numHabitatSpecific] += "public class HabitatSpecific extends Habitat{\n";

    fichier[numHabitatSpecific] += "        public HabitatSpecific(ArrayList<CAppareil> lapp, ArrayList<CEnsAppareil> lens, ArrayList<CScenario> lscen, ArrayList<CInterface> lint, ArrayList<CProgrammation> lprog){\n";
    fichier[numHabitatSpecific] += "           super(lapp,lens,lscen,lint,lprog);\n";
    fichier[numHabitatSpecific] += "       }\n";
    fichier[numHabitatSpecific] += "  public void execScenarioNum(int num)\n";
    fichier[numHabitatSpecific] += "   {\n";
    fichier[numHabitatSpecific] += "     System.out.println( "+guillemet+"Execution du scenario "+guillemet+"+this.l_scenarios.get(num).getNomScenario()+"+guillemet+"..."+guillemet+");\n";
    fichier[numHabitatSpecific] += "     switch(num) {\n";
  }
  
  public void finFichier(){
    fichier[numHabitatSpecific] += "    	default:\n";
    fichier[numHabitatSpecific] += "      }\n";
    fichier[numHabitatSpecific] += "   }\n";
    fichier[numHabitatSpecific] += "}\n";
    //**************************************************************    
    fichier[numCMaisonUser] += "    monHabitat = new HabitatSpecific(ma_liste_appareils,\n";
    fichier[numCMaisonUser] += "      ma_liste_ens_appareils, ma_liste_scenarios,\n";
    fichier[numCMaisonUser] += "      ma_liste_interfaces, ma_liste_programmations);\n";
    fichier[numCMaisonUser] += "   }\n";
    fichier[numCMaisonUser] += "}\n";
  }

  public void init(){
    fichier[0]="";
    fichier[1]="";
    cheminFichier[numCMaisonUser] = "test/code_ex1/CMaisonUser.java";
    cheminFichier[numHabitatSpecific] = "test/code_ex1/HabitatSpecific.java";

    //actions
    motsCle.put("allumer" , "ALLUMER");
    motsCle.put("eteindre" , "ETEINDRE");
    motsCle.put("tamiser" , "TAMISER");
    motsCle.put("allumer partiel" , "ALLUMER_PARTIEL");
    motsCle.put("allumer eco" , "ALLUMER_ECO");
    motsCle.put("ouvrir" , "OUVRIR");
    motsCle.put("fermer" , "FERMER");
    motsCle.put("ouvrir partiel" , "OUVRIR_PARTIEL");
    motsCle.put("fermer partiel" , "FERMER_PARTIEL");

    //etats
    motsCle.put("allume" , "ALLUME");
    motsCle.put("eteint" , "ETEINT");
    motsCle.put("demi" , "DEMI");
    motsCle.put("eco" , "ECO");
    motsCle.put("ouvert" , "OUVERT");
    motsCle.put("ferme" , "FERME");

    //interfaces
    motsCle.put("interrupteur" , "INTERRUPTEUR");
    motsCle.put("ordinateur" , "ORDINATEUR");
    motsCle.put("mobile" , "MOBILE");
    motsCle.put("telephone" , "TELEPHONE");
    motsCle.put("telecommande" , "TELECOMMANDE");
    motsCle.put("tablette" , "TABLETTE");

    //appareils
    motsCle.put("eclairage" , "ECLAIRAGE");
    motsCle.put("volet" , "VOLET");
    motsCle.put("chauffage" , "CHAUFFAGE");
    motsCle.put("alarme" , "ALARME");
    motsCle.put("fenetre" , "FENETRE");

    //autres appareils
    motsCle.put("tv" , "AUTRE_APPAREIL_TV");
    motsCle.put("hifi" , "AUTRE_APPAREIL_HIFI");
    motsCle.put("cafetiere" , "AUTRE_APPAREIL_CAFE");
    motsCle.put("video_proj" , "AUTRE_APPAREIL_VP");
    motsCle.put("lave_vaisselle" , "AUTRE_APPAREIL_LV");
    motsCle.put("lave_linge" , "AUTRE_APPAREIL_LL");
    motsCle.put("seche_linge" , "AUTRE_APPAREIL_SL");
    motsCle.put("ordinateur" , "AUTRE_APPAREIL_ORDINATEUR");
    motsCle.put("portail" , "AUTRE_APPAREIL_PORTAIL");
    

  }
  public void ecritFichier(int numFichier){
    ecritLigne(fichier[numFichier],numFichier);
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  int viensDeIf=0;
  String varType;
  String varAction;
  String[] tabAction;
  String varIdent;
  String var;
  int numAppareil=0;
  String scenario="";
  String scenario1="";
  String txtif;
  int passage=0;
  int numscenario=-1;
  String appareilEnCours="";
  public HashMap<String,String> appareilHash = new HashMap<String,String>();
  HashMap<String, String[]> actionHash = new HashMap<String, String[]>();
  HashMap<String, Integer> numAppareilHash = new HashMap<String, Integer>();
  int numeroProgramme=0;
  void erreur_captee(String i1, String i2)
  {
	  String m = "Erreur syntaxique <"+i2+"> au lieu de <"+i1+">";
	  if (!(i1.equals(i2))) parser.report_error(m,null);	 
  }

  public void initialisation(){
    String tabAction[] ={ "ouvrir", "fermer","eteindre","allumer", "tamiser", "etat", "allumer_partiel", "allumer_eco", "ouvrir_partiel", "fermer_partiel", "allume","eteint"};
    String tabType[] = {"eclairage", "volet", "chauffage", "alarme", "fenetre"};
    String actionEclairage[] = {"allumer","eteindre", "tamiser"};
    String actionAlarme[] = {"allumer", "allumer", "partiel", "eteindre"};
    String actionChauffage[] = {"allumer", "allumer", "�co", "eteindre"};
    String actionFenetre[] = {"ouvrir", "ouvrir", "partiel", "fermer", "fermer_partiel"};
    String actionVolet[] = {"ouvrir", "ouvrir_partiel", "fermer", "fermer_partiel"};		
    String actionAutre_appareil[] = {"allumer", "eteindre"};	
    String etatEclairage[] = {"allum�", "�teint", "demi"};
    String etatAlarme[] = {"allum�", "�teint", "demi"};
    String etatChauffage[] = {"allum�", "�teint", "�co"};
    String etatFenetre[] = {"ouvert", "ferm�", "demi"};
    String etatVolet[] = {"ouvert", "ferm�", "demi"};		
    String etatAutre_appareil[] = {"allum�", "�teint"};
    String sousType[] = {"tv", "hifi", "cafetiere", "video_proj","lave_vaisselle", "lave_linge", "seche_linge", "ordinateur", "portail"};
    String Interface[] = {"interrupteur", "mobile", "telephone", "telecommande", "tablette"};
    //init map de l'action
 
      actionHash.put("eclairage",actionEclairage);
      actionHash.put("alarme",actionAlarme);
      actionHash.put("chauffage",actionChauffage);
      actionHash.put("fenetre",actionFenetre);
      actionHash.put("volet",actionVolet);
      actionHash.put("autre_appareil",actionAutre_appareil);
      actionHash.put("ensemble_appareil",tabAction);
     
      appareilHash.put("autre_appareil","autre_appareil");
  }

  public void fairePutappareilHash(String var1, String var2){
      if(var2.indexOf(",")==-1){
         if(!appareilHash.containsKey(var1)){
            appareilHash.put(var1,var2);
            fairePutnumAppareilHash(var1, numAppareil);
         }
      }else{
      
      }
  }
  
  public void fairePutnumAppareilHash(String var1, int var2){
     if(!numAppareilHash.containsKey(var1)){
        numAppareilHash.put(var1,var2);
     }
  }
  
  public void afficher(String texte){
      System.out.println(texte);
  }
  
  public void concatener(String s, int i){
    parser.fichier[i] += s;
  }

  public void concatenerScenario(String s){
    scenario += s;
  }

  public String checknumAppareil(String var){
    int num = 0;
    if(!numAppareilHash.containsKey(var)){
      num=viensDeIf;
    }else{
      num=numAppareilHash.get(var)+viensDeIf;
    }
    if(num==0)return "";
    return num+"";
  }
  
  public void updateAppareil(String var){
    numAppareilHash.put(var,numAppareil);
  }
  
  public String getClasse(String str){
    String chaine = "C"+str.substring(0,1).toUpperCase()+str.toString().substring(1);
    if(chaine.equals("CVolet") || chaine.equals("CFenetre"))chaine="CVoletFenetre";
    if(chaine.equals("CAutre_appareil"))chaine="CAutreAppareil";
    return chaine;
  }
  

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // REC_Suitet_ident_Prog ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REC_Suitet_ident_Prog",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // REC_Suitet_ident_Prog ::= VIRGULE Date_Comm REC_Suitet_ident_Prog 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(c!=null){RESULT = b+"%"+c;}else{RESULT = b;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REC_Suitet_ident_Prog",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Suitet_ident_Prog ::= Date_Comm REC_Suitet_ident_Prog 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(b!=null){RESULT = a+"%"+b;}else{RESULT = a;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Suitet_ident_Prog",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Date_Comm ::= PAROUV t_date VIRGULE t_date VIRGULE t_date VIRGULE t_date VIRGULE t_date PARFERM 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String chaine=" = new CDate("+b+","+d+","+f+","+h+","+j+");\n";
                                                          RESULT = chaine.replace("_","-1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Date_Comm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Prog ::= CROCHETOUV Suitet_ident_Prog CROCHETFERM POINT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(a!=null)RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prog",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Prog ::= Date_Comm POINT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(a!=null)RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prog",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Rec_Suitet_ident_Asso ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Rec_Suitet_ident_Asso",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Rec_Suitet_ident_Asso ::= VIRGULE t_ident Rec_Suitet_ident_Asso 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(c!=null){RESULT = b+"%"+c;}else{RESULT = b;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Rec_Suitet_ident_Asso",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Suitet_ident_Asso ::= t_ident Rec_Suitet_ident_Asso 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(b!=null){RESULT = a+"%"+b;}else{RESULT = a;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Suitet_ident_Asso",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Asso ::= CROCHETOUV Suitet_ident_Asso CROCHETFERM POINT 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asso",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Asso ::= t_ident POINT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asso",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Recu_commande ::= PROGRAMMER t_ident EGAL Prog 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		numeroProgramme++;
                                                          concatener("\n    CProgrammation p"+numeroProgramme+" = new CProgrammation(\""+b+"\");\n",0);
                                                          String[] tableau=d.split("%");
                                                          for(int i=0;i<tableau.length;i++){
                                                            concatener("    CDate "+"p"+numeroProgramme+"d"+(i+1)+tableau[i],0);
                                                            concatener("    p"+numeroProgramme+".addDate(p"+numeroProgramme+"d"+(i+1)+");\n",0);
                                                          }
                                                          RESULT = b+"%"+d;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Recu_commande",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Recu_commande ::= ASSOCIER t_ident EGAL Asso 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String[] tableau=d.split("%");
                                                        for(int i=0;i<tableau.length;i++){
                                                          concatener("    "+b+".addScenarioAssocie(\""+tableau[i]+"\");\n",0);
                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Recu_commande",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Details_commande ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Details_commande",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Details_commande ::= Recu_commande Details_commande 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+"%"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Details_commande",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Commandes ::= t_DECLA_COM_OUV NT$17 Details_commande NT$18 t_DECLA_COM_FER 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Commandes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$18 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
concatener("\n",0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$17 ::= 
            {
              String RESULT =null;
concatener("\n\n// Les commandes\n\n",0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Affiche_autre_appareil ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Affiche_autre_appareil",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Affiche_autre_appareil ::= PAROUV t_sous_Type PARFERM 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = b;varIdent= b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Affiche_autre_appareil",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // corps_message ::= t_ident POINT ETAT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		appareilEnCours=a;RESULT="appareil"+checknumAppareil(a)+".etatAppareil\" !\"";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("corps_message",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // corps_message ::= t_ident 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		appareilEnCours=a;RESULT="appareil"+checknumAppareil(a)+".getNomAppareil()";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("corps_message",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // corps_message ::= t_texte 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("corps_message",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Suite_message ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Suite_message",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Suite_message ::= VIRGULE corps_message Suite_message 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(c!=null){RESULT=b+"+"+c;}else{RESULT=b;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Suite_message",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Type_Pourtout ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type_Pourtout",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Type_Pourtout ::= t_autre_appareil Affiche_autre_appareil 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		varIdent="autre_appareil";
                                                        varType="autre_appareil";
                                                        RESULT = a+"_"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type_Pourtout",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Type_Pourtout ::= t_ident 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		appareilEnCours=a;varIdent = a;
                                                        varType = appareilHash.get(a);
                                                        RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type_Pourtout",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Type_Pourtout ::= t_Type 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		varType = a;varIdent = a;
                                                        RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type_Pourtout",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Boucle_Pourtout ::= POURTOUT t_ident NT$15 DEUXPOINTS Type_Pourtout FAIRE NT$16 Details_scenario FAIT POINTVIRGULE 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Boucle_Pourtout",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$16 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
fairePutappareilHash(b,d);String type=appareilHash.get(b);
                                                        if(appareilHash.get(appareilHash.get(b))!=null){
                                                          concatenerScenario("for(CEnsAppareil ensAppareil"+checknumAppareil(b)+" : this.l_ensembles)\\n");
                                                          concatenerScenario("if (ensAppareil"+checknumAppareil(b)+".nomEnsAppareil.equals(\""+appareilHash.get(b)+"\"))\\n");
                                                          concatenerScenario("for(CAppareil appareil"+checknumAppareil(b)+" : ensAppareil.lAppareils)");
                                                          passage=2;
                                                        }else{
                                                          if(appareilHash.get(b).substring(0,5).equals("autre")){
                                                            concatenerScenario("for(CAppareil appareil"+checknumAppareil(b)+" : this.l_appareils)\\n");
                                                            concatenerScenario("if (appareil"+checknumAppareil(b)+".estTypeAutreAppareil())");
                                                            passage=2;
                                                          }else{
                                                            txtif="if (appareil"+checknumAppareil(b)+".typeAppareil.equals(TypeAppareil.";
                                                            txtif+=(appareilHash.get(b)+"").toUpperCase()+"))";
                                                            passage=1;
                                                          }
                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$15 ::= 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
appareilEnCours=b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Suite_si ::= SINON NT$14 Details_scenario FSI POINTVIRGULE 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(b!=null){
                                                          concatenerScenario(b);
                                                          
                                                        }else{
                                                          concatenerScenario(";}\\n");};
                                                         if(viensDeIf>0)viensDeIf--;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Suite_si",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$14 ::= 
            {
              String RESULT =null;
concatenerScenario(";}else{");if(viensDeIf>0)viensDeIf--;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Suite_si ::= FSI POINTVIRGULE 
            {
              String RESULT =null;
		concatenerScenario(";}\\n");if(viensDeIf>0)viensDeIf--;;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Suite_si",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Condition_si ::= SI PAROUV t_ident NT$12 POINT ETAT t_comparateurs t_etat PARFERM ALORS NT$13 Details_scenario Suite_si 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condition_si",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$13 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
String chaine="for(CAppareil appareil"+checknumAppareil(c)+" : this.l_appareils)\\n";
                                                       chaine+="if (appareil"+checknumAppareil(c)+".getNomAppareil().equals(\""+c+"\"))\\n";
                                                       chaine+="if (appareil"+checknumAppareil(c)+".etatAppareil.equals(TypeEtatAppareil."+g.toUpperCase()+")){\\n";
                                                       viensDeIf++;
                                                       passage=0;
                                                       concatenerScenario(chaine);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$12 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
appareilEnCours=c; varIdent = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Content_action ::= t_ident POINT t_action POINTVIRGULE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                        tabAction = actionHash.get(varType);
                                                        boolean boo=false;
                                                        for(String action: tabAction){ 
                                                          if (c.compareTo(action) == 0 && !boo ){ boo = true;break;}
                                                        }   
                                                        if (!boo) System.out.println("l'action "+c+" n'est pas accecible pour "+varType+ " a la ligne "+parser.pline()+" et colonne "+parser.pcolumn()); 
                                                        boo = false;
                                                        
                                                        appareilEnCours=a;String chaine="";
                                                           switch(passage){
                                                            case(1):
                                                              chaine+="for(CAppareil appareil"+checknumAppareil(a)+" : this.l_appareils)\\n";
                                                              chaine+=txtif;
                                                              break;
                                                            case(0):
                                                              chaine+="for(CAppareil appareil"+checknumAppareil(a)+" : this.l_appareils)\\n";
                                                              chaine+="if(appareil"+checknumAppareil(a)+".getNomAppareil().equals(\""+a+"\"))";
                                                              break;
                                                          }
                                                          chaine+="appareil"+checknumAppareil(a)+".appliquer(TypeActionAppareil."+c.toUpperCase()+");\\n";
                                                          passage=0;
                                                          concatenerScenario(chaine);
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Content_action",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Content_action ::= t_message PAROUV corps_message Suite_message PARFERM POINTVIRGULE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String chaine=c;
                                                          if(d!=null)chaine+="+"+d;
                                                          afficher(chaine);
                                                          concatenerScenario("System.out.println("+chaine.replace("\"" , "\\" +"\"")+");\\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Content_action",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Content_action ::= t_executer_scenario t_ident POINTVIRGULE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "(executer scenario)"+a+","+b+"(/executer scenario)";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Content_action",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Content_action ::= Boucle_Pourtout 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Content_action",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Content_action ::= Condition_si 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Content_action",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Details_scenario ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Details_scenario",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Details_scenario ::= Content_action Details_scenario 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(a!=null && b==null){RESULT = a;}
                                                          if(a==null && b!=null){RESULT = b;}
                                                          if(a!=null && b!=null){RESULT = a+b;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Details_scenario",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Details_scenarii ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Details_scenarii",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Details_scenarii ::= t_SCE_OUV t_ident NT$10 PGQ Details_scenario NT$11 t_SCE_FER t_ident PGQ Details_scenarii 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Details_scenarii",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$11 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
numscenario++;
                                                        concatener("case "+numscenario+":\n"+scenario.replace("\\\"","\"").replace("\\n","")+"\nbreak;\n",1);
                                                        concatenerScenario("\";\n\n\n");
                                                        concatener(scenario.replace("\"","\\\"").replace("\\\\","\\").replace("\\n\\","\\n"),0);
                                                        concatener("CScenario "+b+" = new CScenario(\""+b+"\","+b+"_contenu);\n",0);
                                                        concatener("ma_liste_scenarios.add("+b+");\n",0);
                                                        numAppareil=0;
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$10 ::= 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
appareilEnCours=b;parser.isUniqueIdent( b, parser.pline(), parser.pcolumn());scenario="";concatener("String "+b+"_contenu = \"",0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Scenarii ::= t_DECLA_SCE_OUV NT$9 Details_scenarii t_DECLA_SCE_FER 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Scenarii",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$9 ::= 
            {
              String RESULT =null;
concatener("\n// Les scenarii\n\n",0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SuiteInterface ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SuiteInterface",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SuiteInterface ::= VIRGULE t_ident NT$8 SuiteInterface 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b+","+c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SuiteInterface",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$8 ::= 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parser.isUniqueIdent( b, parser.pline(), parser.pcolumn());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Variables_interface ::= t_ident NT$7 SuiteInterface 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(b!=null){RESULT = a+","+b;}else{RESULT = a;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables_interface",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$7 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parser.isUniqueIdent( a, parser.pline(), parser.pcolumn());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Recu_interfaces ::= t_Interface Variables_interface POINT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a+","+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Recu_interfaces",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Details_interface ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Details_interface",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Details_interface ::= Recu_interfaces NT$6 Details_interface 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Details_interface",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$6 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                                                        String[] tInterfaces = a.split(",");
                                                        for(int i=1;i<tInterfaces.length;i++){
                                                          if(!(tInterfaces[i]).equals("null")){
                                                            concatener("    CInterface " + tInterfaces[i] + " = new CInterface("+parser.guillemet + tInterfaces[i] +parser.guillemet +",TypeInterface."+parser.motsCle.get(tInterfaces[0])+");\n",0);

                                                            concatener("    ma_liste_interfaces.add("+tInterfaces[i]+");\n",0);
                                                          }
                                                        }

                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Interfaces ::= t_DECLA_INT_OUV NT$5 Details_interface t_DECLA_INT_FER 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Interfaces",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$5 ::= 
            {
              String RESULT =null;
concatener("\n// Les interfaces\n\n",0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Autre_ident ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Autre_ident",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Autre_ident ::= VIRGULE t_ident Autre_ident 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(c!=null){RESULT = b+","+c;}else{RESULT = b;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Autre_ident",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Suite_ident ::= t_ident NT$4 Autre_ident 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+","+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Suite_ident",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$4 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
var =  a;varType = appareilHash.get(var);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Definir_appareil ::= DEFINIR t_ident NT$3 EGAL CROCHETOUV Suite_ident CROCHETFERM POINT 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = b+","+e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Definir_appareil",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
varIdent =  b;
                                                                        parser.isUniqueIdent(varIdent, parser.pline(), parser.pcolumn());
                                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Autre_appareils ::= t_autre_appareil PAROUV t_sous_Type PARFERM Variables_appareil POINT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a+","+c+","+e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Autre_appareils",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Suitet_ident_app ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Suitet_ident_app",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Suitet_ident_app ::= VIRGULE t_ident Suitet_ident_app 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.isUniqueIdent( b, parser.pline(), parser.pcolumn());
                                                                      if(c!=null){RESULT = b+","+c;}else{;RESULT = b;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Suitet_ident_app",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Variables_appareil ::= t_ident Suitet_ident_app 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.isUniqueIdent(a, parser.pline(), parser.pcolumn());
                                                                        if(b!=null){RESULT = a+","+b;}else{;RESULT = a;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables_appareil",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Un_Appareil ::= t_Type Variables_appareil POINT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		varType=a;RESULT = a+","+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Un_Appareil",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Recu_appareil ::= Definir_appareil 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "3,"+a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Recu_appareil",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Recu_appareil ::= Autre_appareils 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "2,"+a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Recu_appareil",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Recu_appareil ::= Un_Appareil 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "1,"+a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Recu_appareil",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Details_appareil ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Details_appareil",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Details_appareil ::= Recu_appareil NT$2 Details_appareil 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Details_appareil",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(a!=null){
                                                                          String[] tAppareil = a.split(",");
                                                                          String maClasse = getClasse(tAppareil[1]);
                                                                          if(Integer.parseInt(tAppareil[0])<3){
                                                                            for(int i=1+Integer.parseInt(tAppareil[0]);i<tAppareil.length;i++){
                                                                              concatener("    "+maClasse+" "+tAppareil[i]+" = new "+ maClasse +"("+parser.guillemet+tAppareil[i]+parser.guillemet+",TypeAppareil."+parser.motsCle.get(tAppareil[Integer.parseInt(tAppareil[0])])+");"+"\n",0);
                                                                              fairePutappareilHash(tAppareil[i],tAppareil[1]);
                                                                              concatener("    "+"ma_liste_appareils.add("+tAppareil[i]+");"+"\n",0);
                                                                            }
                                                                          }else{
                                                                            concatener("    " + "CEnsAppareil " + tAppareil[1] + " = new CEnsAppareil("+parser.guillemet + tAppareil[1] + parser.guillemet+");\n",0);
                                                                             fairePutappareilHash(tAppareil[1], "ensemble_appareil");
                                                                            for(int i=2;i<tAppareil.length;i++){
                                                                              concatener("    " + tAppareil[1] + ".addAppareil(" + tAppareil[i] + ");\n",0);
                                                                            }
                                                                            concatener("    ma_liste_ens_appareils.add("+tAppareil[1] + ");\n",0);
                                                                          }
                                                                        }
                                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Appareils ::= t_DECLA_APP_OUV NT$1 Details_appareil t_DECLA_APP_FER 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Appareils",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              String RESULT =null;
concatener("\n// Les appareils\n\n",0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Axiome EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Axiome ::= NT$0 t_BAL_PROG_OUV Appareils Interfaces Scenarii Commandes t_BAL_PROG_FER 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		parser.finFichier();
                                                                        parser.ecritFichier(parser.numCMaisonUser);
                                                                       parser.ecritFichier(parser.numHabitatSpecific);
                                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Axiome",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              String RESULT =null;
initialisation();
                                                                        parser.init();
                                                                        parser.debutFichier();
                                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

