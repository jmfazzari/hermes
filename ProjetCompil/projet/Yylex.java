/* The following code was generated by JFlex 1.6.1 */

// Specification JFlex
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>projet.lex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\70\1\70\1\72\1\72\1\72\22\0\1\71\1\21\1\14"+
    "\3\0\2\20\1\6\1\7\2\0\1\3\1\20\1\4\1\34\12\2"+
    "\1\15\1\5\1\16\1\10\1\13\1\20\1\0\1\26\1\1\1\35"+
    "\1\31\1\30\1\42\1\25\1\1\1\40\2\1\1\36\1\27\1\41"+
    "\1\24\1\22\1\1\1\23\1\33\1\37\1\32\5\1\4\0\1\17"+
    "\1\0\1\46\1\66\1\50\1\64\1\44\1\56\1\47\1\54\1\52"+
    "\1\65\1\1\1\51\1\43\1\57\1\62\1\63\1\1\1\53\1\45"+
    "\1\60\1\55\1\61\1\1\1\67\2\1\1\11\1\0\1\12\7\0"+
    "\1\72\u1fa2\0\1\72\1\72\udfd3\0\1\20\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\22\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\2\1\16\1\1"+
    "\1\4\1\1\1\2\16\3\1\17\1\0\1\20\4\0"+
    "\1\17\6\3\1\21\15\3\1\22\7\3\6\0\3\3"+
    "\1\23\21\3\1\24\15\3\6\0\4\3\1\25\17\3"+
    "\1\26\14\3\6\0\6\3\1\27\3\3\1\30\5\3"+
    "\1\23\1\3\1\31\5\3\1\32\7\3\6\0\1\3"+
    "\1\33\5\3\1\23\5\3\1\34\12\3\6\0\1\35"+
    "\4\3\1\34\10\3\1\34\4\3\1\36\6\0\1\3"+
    "\1\37\13\3\1\40\2\0\1\41\3\0\12\3\4\0"+
    "\1\42\7\3\1\43\4\0\5\3\4\0\4\3\4\0"+
    "\3\3\7\0\1\3\1\44\12\0\1\3\12\0\1\3"+
    "\1\45\11\0\1\46\4\0\1\47\35\0\1\50\6\0"+
    "\1\51\1\52\2\0\1\53\2\0\1\54\1\55\1\56"+
    "\1\0\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\73\0\73\0\73\0\73"+
    "\0\73\0\354\0\73\0\73\0\354\0\u0127\0\73\0\u0162"+
    "\0\166\0\354\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4"+
    "\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c"+
    "\0\u04d7\0\u0512\0\u0127\0\73\0\u054d\0\u0588\0\u05c3\0\u05fe"+
    "\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6"+
    "\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae"+
    "\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\166\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23"+
    "\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\166\0\u0ec0"+
    "\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098"+
    "\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270"+
    "\0\166\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d"+
    "\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5"+
    "\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd"+
    "\0\166\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a"+
    "\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32"+
    "\0\166\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf"+
    "\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7"+
    "\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f"+
    "\0\u20ba\0\166\0\u20f5\0\u2130\0\u216b\0\166\0\u21a6\0\u21e1"+
    "\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\166\0\u2343\0\u237e"+
    "\0\u23b9\0\u23f4\0\u242f\0\166\0\u246a\0\u24a5\0\u22cd\0\u24e0"+
    "\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8"+
    "\0\u26f3\0\u272e\0\166\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855"+
    "\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d"+
    "\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05"+
    "\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\166"+
    "\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a"+
    "\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\166\0\u30dc\0\u3117"+
    "\0\u3152\0\u318d\0\166\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4"+
    "\0\u32ef\0\u332a\0\166\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451"+
    "\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3\0\166\0\u35ee"+
    "\0\u3629\0\73\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b"+
    "\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963"+
    "\0\u399e\0\u39d9\0\u3a14\0\73\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00"+
    "\0\u3b3b\0\u3b76\0\u3bb1\0\166\0\u3bec\0\u3c27\0\u3c62\0\u3c9d"+
    "\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75"+
    "\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d"+
    "\0\u4088\0\u40c3\0\u40fe\0\u4139\0\u4174\0\u41af\0\u41ea\0\u4225"+
    "\0\u4260\0\u429b\0\u42d6\0\u4311\0\166\0\u434c\0\u4387\0\u43c2"+
    "\0\u43fd\0\u4438\0\u4473\0\u44ae\0\u44e9\0\u4524\0\u455f\0\u459a"+
    "\0\u45d5\0\u4610\0\u464b\0\u4686\0\u46c1\0\u46fc\0\u4737\0\u4772"+
    "\0\u47ad\0\u47e8\0\u4823\0\73\0\u485e\0\u4899\0\u48d4\0\u490f"+
    "\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\166\0\u4a71\0\u4aac"+
    "\0\u4ae7\0\u4b22\0\73\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49"+
    "\0\u4c84\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u4de6\0\u4e21"+
    "\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9"+
    "\0\u5034\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196\0\u51d1"+
    "\0\73\0\u520c\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u5333\0\73"+
    "\0\73\0\u536e\0\u53a9\0\73\0\u53e4\0\u541f\0\73\0\73"+
    "\0\73\0\u545a\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\2\1\22\12\3\1\23\6\3\1\24\1\25\1\26"+
    "\1\27\1\3\1\30\1\31\1\32\1\3\1\33\1\3"+
    "\1\34\1\3\1\35\1\36\1\37\1\40\1\41\3\3"+
    "\2\42\75\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\33\3\5\0\1\4\100\0\1\22\2\0\1\22\2\0"+
    "\1\22\2\0\1\22\52\0\4\43\1\0\5\43\1\0"+
    "\1\44\1\43\1\0\51\43\1\0\1\43\11\0\1\22"+
    "\2\0\1\22\2\0\1\22\2\0\1\22\1\45\6\0"+
    "\1\46\1\0\1\47\1\50\72\0\1\51\37\0\2\3"+
    "\14\0\1\3\2\0\12\3\1\0\7\3\1\52\15\3"+
    "\1\53\5\3\4\0\2\3\14\0\1\3\2\0\12\3"+
    "\1\0\13\3\1\54\7\3\1\55\6\3\1\56\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\7\3\1\57"+
    "\5\3\1\60\15\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\10\3\1\61\3\3\1\62\3\3\1\63"+
    "\12\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\11\3\1\64\5\3\1\65\13\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\11\3\1\66\21\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\22\3\1\67"+
    "\10\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\15\3\1\70\15\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\7\3\1\71\1\72\1\73\21\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\7\3\1\74"+
    "\1\3\1\75\12\3\1\76\6\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\15\3\1\77\7\3\1\100"+
    "\5\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\16\3\1\101\1\3\1\102\12\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\16\3\1\103\6\3\1\104"+
    "\5\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\7\3\1\105\23\3\73\0\2\42\24\0\1\106\77\0"+
    "\1\107\77\0\1\110\57\0\1\111\6\0\1\112\1\0"+
    "\1\113\40\0\4\51\1\0\5\51\2\0\1\51\1\0"+
    "\51\51\1\0\1\51\2\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\10\3\1\114\22\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\31\3\1\115\1\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\14\3\1\116"+
    "\10\3\1\117\5\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\7\3\1\120\1\3\1\121\21\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\7\3\1\122"+
    "\23\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\13\3\1\123\17\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\22\3\1\124\10\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\10\3\1\125\22\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\11\3\1\126"+
    "\2\3\1\127\10\3\1\130\5\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\23\3\1\131\7\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\21\3\1\132"+
    "\11\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\11\3\1\133\21\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\24\3\1\134\6\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\23\3\1\135\7\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\21\3\1\136"+
    "\11\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\16\3\1\137\3\3\1\140\10\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\15\3\1\141\15\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\15\3\1\142"+
    "\15\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\14\3\1\143\16\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\6\3\1\144\22\3\1\145\1\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\27\3\1\146"+
    "\3\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\14\3\1\147\16\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\27\3\1\150\3\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\24\3\1\151\6\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\25\3\1\152"+
    "\5\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\16\3\1\153\1\3\1\154\12\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\6\3\1\155\12\3\1\156"+
    "\11\3\27\0\1\157\103\0\1\160\65\0\1\161\65\0"+
    "\1\162\77\0\1\163\77\0\1\164\36\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\10\3\1\165\22\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\15\3\1\166"+
    "\15\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\11\3\1\167\21\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\15\3\1\170\15\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\23\3\1\171\7\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\13\3\1\172"+
    "\17\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\17\3\1\173\13\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\25\3\1\174\5\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\25\3\1\175\5\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\16\3\1\176"+
    "\14\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\20\3\1\177\12\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\16\3\1\200\14\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\16\3\1\201\14\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\7\3\1\202"+
    "\23\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\20\3\1\203\12\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\7\3\1\204\23\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\7\3\1\205\23\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\15\3\1\76"+
    "\15\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\6\3\1\206\24\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\7\3\1\207\23\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\16\3\1\210\4\3\1\211"+
    "\7\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\7\3\1\212\23\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\15\3\1\213\15\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\14\3\1\214\16\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\7\3\1\215"+
    "\23\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\7\3\1\216\23\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\15\3\1\217\15\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\7\3\1\220\6\3\1\221"+
    "\14\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\12\3\1\222\20\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\23\3\1\223\7\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\16\3\1\224\14\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\15\3\1\117"+
    "\15\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\15\3\1\225\15\3\30\0\1\226\103\0\1\227\75\0"+
    "\1\230\55\0\1\231\103\0\1\232\65\0\1\233\43\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\11\3\1\234"+
    "\21\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\14\3\1\235\16\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\15\3\1\236\15\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\22\3\1\237\10\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\20\3\1\240"+
    "\12\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\7\3\1\241\23\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\22\3\1\242\10\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\13\3\1\243\17\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\6\3\1\244"+
    "\24\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\6\3\1\245\24\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\10\3\1\246\22\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\7\3\1\247\23\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\23\3\1\250"+
    "\7\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\21\3\1\251\11\3\4\0\2\3\14\0\1\252\2\0"+
    "\12\3\1\0\33\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\16\3\1\253\14\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\7\3\1\254\23\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\23\3\1\255"+
    "\7\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\7\3\1\256\23\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\13\3\1\257\12\3\1\260\4\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\10\3\1\261"+
    "\22\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\7\3\1\262\23\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\25\3\1\263\5\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\23\3\1\264\7\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\22\3\1\265"+
    "\10\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\16\3\1\266\14\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\15\3\1\267\15\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\16\3\1\270\14\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\11\3\1\271"+
    "\21\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\23\3\1\272\7\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\22\3\1\273\10\3\26\0\1\274\75\0"+
    "\1\275\72\0\1\276\71\0\1\277\103\0\1\300\75\0"+
    "\1\301\32\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\12\3\1\302\20\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\7\3\1\303\23\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\16\3\1\304\14\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\23\3\1\117"+
    "\3\3\1\305\3\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\23\3\1\306\7\3\4\0\2\3\14\0"+
    "\1\307\2\0\12\3\1\0\33\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\15\3\1\310\15\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\7\3\1\264"+
    "\23\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\7\3\1\311\23\3\4\0\2\3\14\0\1\312\2\0"+
    "\12\3\1\0\33\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\15\3\1\313\15\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\21\3\1\304\11\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\14\3\1\314"+
    "\7\3\1\315\6\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\16\3\1\316\14\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\16\3\1\317\14\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\16\3\1\244"+
    "\14\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\25\3\1\320\5\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\17\3\1\321\13\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\7\3\1\322\23\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\23\3\1\323"+
    "\7\3\4\0\2\3\14\0\1\324\2\0\12\3\1\0"+
    "\33\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\11\3\1\325\21\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\23\3\1\117\7\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\11\3\1\326\21\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\15\3\1\327"+
    "\15\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\25\3\1\330\5\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\15\3\1\331\15\3\31\0\1\332\67\0"+
    "\1\333\72\0\1\334\72\0\1\335\75\0\1\336\72\0"+
    "\1\337\45\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\7\3\1\340\23\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\11\3\1\341\21\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\16\3\1\342\14\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\7\3\1\343"+
    "\23\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\14\3\1\314\16\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\7\3\1\344\23\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\16\3\1\345\14\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\11\3\1\346"+
    "\21\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\7\3\1\347\23\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\15\3\1\350\15\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\11\3\1\351\21\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\20\3\1\352"+
    "\12\3\4\0\2\3\14\0\1\353\2\0\12\3\1\0"+
    "\33\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\6\3\1\354\24\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\25\3\1\355\5\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\16\3\1\356\14\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\23\3\1\235"+
    "\7\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\26\3\1\357\4\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\23\3\1\360\7\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\6\3\1\361\24\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\14\3\1\76"+
    "\16\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\20\3\1\362\12\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\16\3\1\363\14\3\32\0\1\364\71\0"+
    "\1\365\104\0\1\366\60\0\1\367\67\0\1\370\72\0"+
    "\1\371\50\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\12\3\1\244\20\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\7\3\1\356\23\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\16\3\1\372\14\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\16\3\1\373"+
    "\14\3\4\0\2\3\14\0\1\374\2\0\12\3\1\0"+
    "\33\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\26\3\1\375\4\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\16\3\1\376\14\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\22\3\1\377\10\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\15\3\1\u0100"+
    "\15\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\26\3\1\u0101\4\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\26\3\1\u0102\4\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\6\3\1\u0103\24\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\22\3\1\235"+
    "\10\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\16\3\1\u0104\14\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\7\3\1\u0105\23\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\6\3\1\u0106\24\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\23\3\1\u0107"+
    "\7\3\32\0\1\u0108\102\0\1\u0109\57\0\1\u010a\75\0"+
    "\1\u010b\71\0\1\u010c\104\0\1\u010d\33\0\2\3\14\0"+
    "\1\u010e\2\0\12\3\1\0\33\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\7\3\1\u010f\16\3\1\u0102"+
    "\4\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\26\3\1\u0110\4\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\7\3\1\76\23\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\12\3\1\376\20\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\10\3\1\u0111"+
    "\22\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\23\3\1\u0112\7\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\11\3\1\u0113\21\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\11\3\1\u0114\21\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\25\3\1\u0115"+
    "\5\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\20\3\1\u0116\12\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\7\3\1\u0117\23\3\33\0\1\u0118\102\0"+
    "\1\u0119\61\0\1\u011a\102\0\1\u011b\57\0\1\u011c\47\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\10\3\1\u011d"+
    "\22\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\13\3\1\u011e\17\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\11\3\1\u011f\21\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\10\3\1\u0120\22\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\7\3\1\u0121"+
    "\23\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\16\3\1\u0122\14\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\22\3\1\u0123\10\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\30\3\1\76\2\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\16\3\1\76"+
    "\14\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\16\3\1\u0124\14\3\22\0\1\u0125\77\0\1\u0126\76\0"+
    "\1\u0127\102\0\1\u0128\33\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\13\3\1\u0129\17\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\25\3\1\356\5\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\16\3\1\u012a"+
    "\14\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\7\3\1\u012b\23\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\20\3\1\u012c\12\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\23\3\1\u012d\7\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\27\3\1\235"+
    "\3\3\34\0\1\u012e\102\0\1\u012f\50\0\1\u0130\77\0"+
    "\1\u0131\47\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\7\3\1\u0132\23\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\7\3\1\u0133\23\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\14\3\1\u0134\16\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\16\3\1\303"+
    "\14\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\15\3\1\u0135\15\3\27\0\1\u0136\65\0\1\u0137\104\0"+
    "\1\u0138\102\0\1\u0139\32\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\22\3\1\u013a\10\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\15\3\1\u013b\15\3\4\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\14\3\1\376"+
    "\16\3\4\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\7\3\1\u013c\23\3\32\0\1\u013d\71\0\1\u013e\4\0"+
    "\1\u013f\1\0\1\u0140\2\0\1\u0141\56\0\1\u0142\65\0"+
    "\1\u0143\54\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\11\3\1\u0144\21\3\4\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\14\3\1\u0145\16\3\4\0\2\3\14\0"+
    "\1\3\2\0\12\3\1\0\14\3\1\356\16\3\35\0"+
    "\1\u0146\62\0\1\u0147\105\0\1\u0148\61\0\1\u0149\107\0"+
    "\1\u014a\60\0\1\u014b\71\0\1\u014c\4\0\1\u014d\1\0"+
    "\1\u014e\2\0\1\u014f\33\0\2\3\14\0\1\3\2\0"+
    "\12\3\1\0\16\3\1\u0150\14\3\36\0\1\u0151\61\0"+
    "\1\u0152\100\0\1\u0153\71\0\1\u0154\102\0\1\u0155\65\0"+
    "\1\u0156\62\0\1\u0157\105\0\1\u0158\61\0\1\u0159\107\0"+
    "\1\u015a\32\0\2\3\14\0\1\3\2\0\12\3\1\0"+
    "\15\3\1\u015b\15\3\16\0\1\u015c\105\0\1\u015d\105\0"+
    "\1\u015e\60\0\1\u015f\73\0\1\u0160\75\0\1\u0161\61\0"+
    "\1\u0162\100\0\1\u0163\71\0\1\u0164\102\0\1\u0165\34\0"+
    "\2\3\14\0\1\3\2\0\12\3\1\0\25\3\1\u0166"+
    "\5\3\26\0\1\u0167\75\0\1\u0168\72\0\1\u0169\67\0"+
    "\1\u016a\62\0\1\u016b\105\0\1\u016c\105\0\1\u016d\60\0"+
    "\1\u016e\73\0\1\u016f\72\0\1\u0170\65\0\1\u0171\110\0"+
    "\1\u0172\73\0\1\u0173\53\0\1\u0174\75\0\1\u0175\72\0"+
    "\1\u0176\67\0\1\u0177\107\0\1\u0178\72\0\1\u0179\63\0"+
    "\1\u017a\67\0\1\u017b\74\0\1\u017c\65\0\1\u017d\110\0"+
    "\1\u017e\73\0\1\u017f\66\0\1\u0180\74\0\1\u0181\62\0"+
    "\1\u0182\77\0\1\u0183\75\0\1\u0184\72\0\1\u0185\63\0"+
    "\1\u0186\67\0\1\u0187\77\0\1\u0188\52\0\1\u0189\112\0"+
    "\1\u018a\67\0\1\u018b\100\0\1\u018c\74\0\1\u018d\62\0"+
    "\1\u018e\77\0\1\u018f\50\0\1\u0190\72\0\1\u0191\112\0"+
    "\1\u0192\72\0\1\u0193\52\0\1\u0194\112\0\1\u0195\67\0"+
    "\1\u0196\55\0\1\u0197\72\0\1\u0198\72\0\1\u0199\112\0"+
    "\1\u019a\52\0\1\u019b\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21653];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\5\11\1\1\2\11\2\1\1\11"+
    "\23\1\1\0\1\11\4\0\35\1\6\0\43\1\6\0"+
    "\41\1\6\0\40\1\6\0\30\1\6\0\24\1\6\0"+
    "\16\1\2\0\1\11\3\0\12\1\4\0\1\11\10\1"+
    "\4\0\5\1\4\0\4\1\4\0\3\1\7\0\2\1"+
    "\12\0\1\1\12\0\1\1\1\11\11\0\1\1\4\0"+
    "\1\11\35\0\1\11\6\0\2\11\2\0\1\11\2\0"+
    "\3\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public int getYyLine(){
		return yyline+1;
	}
	public int getYyColumn(){
		return yycolumn+1;
	}
	public String getYyText(){
		return yytext();
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol (sym.t_comparateurs, new String(yytext()));
            }
          case 48: break;
          case 2: 
            { System.out.println(">>rejet>>"+yytext()+"<<rejet<<");
            }
          case 49: break;
          case 3: 
            { return new Symbol (sym.t_ident, new String(yytext()));
            }
          case 50: break;
          case 4: 
            { return new Symbol (sym.t_date, new String(yytext()));
            }
          case 51: break;
          case 5: 
            { return new Symbol (sym.VIRGULE);
            }
          case 52: break;
          case 6: 
            { return new Symbol (sym.POINT);
            }
          case 53: break;
          case 7: 
            { return new Symbol (sym.POINTVIRGULE);
            }
          case 54: break;
          case 8: 
            { return new Symbol (sym.PAROUV);
            }
          case 55: break;
          case 9: 
            { return new Symbol (sym.PARFERM);
            }
          case 56: break;
          case 10: 
            { return new Symbol (sym.EGAL);
            }
          case 57: break;
          case 11: 
            { return new Symbol (sym.CROCHETOUV);
            }
          case 58: break;
          case 12: 
            { return new Symbol (sym.CROCHETFERM);
            }
          case 59: break;
          case 13: 
            { return new Symbol (sym.PGQ);
            }
          case 60: break;
          case 14: 
            { return new Symbol (sym.DEUXPOINTS);
            }
          case 61: break;
          case 15: 
            { 
            }
          case 62: break;
          case 16: 
            { return new Symbol (sym.t_texte, new String(yytext()));
            }
          case 63: break;
          case 17: 
            { return new Symbol (sym.SI);
            }
          case 64: break;
          case 18: 
            { return new Symbol (sym.t_sous_Type, new String(yytext()));
            }
          case 65: break;
          case 19: 
            { return new Symbol (sym.t_etat, new String(yytext()));
            }
          case 66: break;
          case 20: 
            { return new Symbol (sym.FSI);
            }
          case 67: break;
          case 21: 
            { return new Symbol (sym.ETAT);
            }
          case 68: break;
          case 22: 
            { return new Symbol (sym.FAIT);
            }
          case 69: break;
          case 23: 
            { return new Symbol (sym.SINON);
            }
          case 70: break;
          case 24: 
            { return new Symbol (sym.ALORS);
            }
          case 71: break;
          case 25: 
            { return new Symbol (sym.FAIRE);
            }
          case 72: break;
          case 26: 
            { return new Symbol (sym.t_Type, new String(yytext()));
            }
          case 73: break;
          case 27: 
            { return new Symbol (sym.t_Interface, new String(yytext()));
            }
          case 74: break;
          case 28: 
            { return new Symbol (sym.t_action, new String(yytext()));
            }
          case 75: break;
          case 29: 
            { return new Symbol (sym.t_message);
            }
          case 76: break;
          case 30: 
            { return new Symbol (sym.DEFINIR);
            }
          case 77: break;
          case 31: 
            { return new Symbol (sym.ASSOCIER);
            }
          case 78: break;
          case 32: 
            { return new Symbol (sym.POURTOUT);
            }
          case 79: break;
          case 33: 
            { return new Symbol(sym.t_SCE_OUV);
            }
          case 80: break;
          case 34: 
            { return new Symbol(sym.t_SCE_FER);
            }
          case 81: break;
          case 35: 
            { return new Symbol (sym.PROGRAMMER);
            }
          case 82: break;
          case 36: 
            { return new Symbol (sym.t_autre_appareil, new String(yytext()));
            }
          case 83: break;
          case 37: 
            { return new Symbol(sym.t_BAL_PROG_OUV);
            }
          case 84: break;
          case 38: 
            { return new Symbol(sym.t_executer_scenario, new String(yytext()));
            }
          case 85: break;
          case 39: 
            { return new Symbol(sym.t_BAL_PROG_FER);
            }
          case 86: break;
          case 40: 
            { return new Symbol(sym.t_DECLA_SCE_OUV);
            }
          case 87: break;
          case 41: 
            { return new Symbol(sym.t_DECLA_APP_OUV);
            }
          case 88: break;
          case 42: 
            { return new Symbol (sym.t_DECLA_COM_OUV);
            }
          case 89: break;
          case 43: 
            { return new Symbol(sym.t_DECLA_SCE_FER);
            }
          case 90: break;
          case 44: 
            { return new Symbol(sym.t_DECLA_INT_OUV);
            }
          case 91: break;
          case 45: 
            { return new Symbol(sym.t_DECLA_APP_FER);
            }
          case 92: break;
          case 46: 
            { return new Symbol (sym.t_DECLA_COM_FER);
            }
          case 93: break;
          case 47: 
            { return new Symbol(sym.t_DECLA_INT_FER);
            }
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
