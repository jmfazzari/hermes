// Specification JFlex
import java_cup.runtime.Symbol;

%%
%unicode
%standalone
%line
%column

%{
	public int getYyLine(){
		return yyline+1;
	}
	public int getYyColumn(){
		return yycolumn+1;
	}
	public String getYyText(){
		return yytext();
	}
%}

// qqs exemples de macros...
// caractère spéciaux
//chiffre = [0-9]
//entier = {chiffre}+
ident = [a-zA-Z_]([0-9]|[a-zA-Z_])*
virgule = ","
point = "."
pointvirgule = ";"
parouv = "("
parfer = ")"
egal = "="
crochetouv = "{"
crochetfer = "}"
pgq = ">"
guillemet = "\""
deuxpoints = ":"
comparateurs = ["==""<"">""<="">=""!"]*

//date
date=([0-9]+|_)

alphabet = [-a-zA-Z0-9ÀÁÂÃÄÅÇÑñÇçÈÉÊËÌÍÎÏÒÓÔÕÖØÙÚÛÜİàáâãäåçèéêëìíîïğòóôõöøùúûüıÿ,'= !:?(){}/&_]*

//balises
debut_programme_domus=<PROGRAMME_DOMUS>
fin_programme_domus=<\/PROGRAMME_DOMUS>
debut_declaration_appareils = <DECLARATION_APPAREILS>
fin_declaration_appareils = <\/DECLARATION_APPAREILS>
debut_declaration_interfaces = <DECLARATION_INTERFACES>
fin_declaration_interfaces = <\/DECLARATION_INTERFACES>
debut_declaration_scenarii = <DECLARATION_SCENARII>
fin_declaration_scenarii = <\/DECLARATION_SCENARII>
debut_scenario =<SCENARIO
fin_scenario =<\/SCENARIO
debut_declaration_commandes = <DECLARATION_COMMANDES>
fin_declaration_commandes = <\/DECLARATION_COMMANDES>
balises_ouvrantes = {debut_programme_domus}|{debut_declaration_appareils}|{debut_declaration_interfaces}|{debut_declaration_scenarii}|{debut_scenario}|{debut_declaration_commandes}
balises_fermantes = {fin_programme_domus}|{fin_declaration_appareils}|{fin_declaration_interfaces}|{fin_declaration_scenarii}|{fin_scenario}|{fin_declaration_commandes}

//divers
texte= {guillemet}{alphabet}*{guillemet}
commentaires = "\/\/"{alphabet}*
message = message

//types
eclairage = eclairage
alarme = alarme
chauffage = chauffage
fenetre = fenetre
volet = volet
autre_appareil = autre_appareil
types_appareil = {eclairage}|{alarme}|{chauffage}|{fenetre}|{volet}|{autre_appareil}

//sous-types
tv = tv
hifi = hifi
cafetiere = cafetiere
video_proj = video_proj
lave_vaisselle = lave_vaisselle
lave_linge = lave_linge
seche_linge = seche_linge
ordinateur = ordinateur
portail = portail
sous_types = {tv}|{hifi}|{cafetiere}|{video_proj}|{lave_vaisselle}|{lave_linge}|{seche_linge}|{ordinateur}|{portail}

//type interfaces
mobile = mobile
telephone = telephone
telecommande = telecommande
tablette = tablette
interrupteur = interrupteur
types_interface = {mobile}|{telephone}|{telecommande}|{tablette}|{interrupteur}

//conditionnelles
sinon = sinon
si=si
alors = alors
fsi = fsi
conditions = {si}|{sinon}|{alors}|{fsi}

//boucles
pourtout=pourtout
faire=faire
fait=fait
boucles = {pourtout}|{faire}|{fait}

//commandes
executer_scenario = executer_scenario
definir = definir
associer = associer
programmer = programmer
commandes = {executer_scenario}|{definir}|{associer}|{programmer}

//actions
ouvrir = ouvrir
fermer = fermer
eteindre = eteindre
allumer = allumer
tamiser = tamiser
allumer_partiel = allumer_partiel
allumer_eco = allumer_eco
ouvrir_partiel = ouvrir_partiel
fermer_partiel = fermer_partiel
etat = etat
actions = {ouvrir}|{fermer}|{eteindre}|{allumer}|{tamiser}|{allumer_partiel}|{allumer_eco}|{ouvrir_partiel}|{fermer_partiel}|{etat}

// etats
allume = allume
eteint = eteint
demi = demi
eco = eco
ouvert = ouvert
ferme = ferme
etats = {allume}|{eteint}|{demi}|{eco}|{ouvert}|{ferme}




//erreur_chaine = \"[^\"\n]*\n  

%%
// **************************************************************************************************
// *********************************** debut traitement *********************************************
// **************************************************************************************************

{balises_ouvrantes} {System.out.println("balises_ouvrantes : "+yytext());}
{balises_fermantes} {System.out.println("balises_fermantes : "+yytext());}
{types_appareil} {System.out.println("types_appareil : "+yytext());}
{sous_types} {System.out.println("sous_types : "+yytext());}
{conditions} {System.out.println("conditions : "+yytext());}
{boucles} {System.out.println("boucles : "+yytext());}
{types_interface} {System.out.println("types_interface : "+yytext());}
{commandes} {System.out.println("commandes : "+yytext());}
{actions} {System.out.println("actions : "+yytext());}
{etats} {System.out.println("etats : "+yytext());}




{message} {System.out.println(yytext());}

// caractère spéciaux
{date} {System.out.println(yytext());}
//{chiffre} {System.out.println(yytext());}
{ident} {System.out.println("ident : "+yytext());}
{commentaires}{alphabet}* {}
{point} {System.out.println(yytext());}
{virgule} {System.out.println(yytext());}
{pointvirgule} {System.out.println(yytext());}
{parouv} {System.out.println(yytext());}
{parfer} {System.out.println(yytext());}
{egal} {System.out.println(yytext());}
{crochetouv} {System.out.println(yytext());}
{crochetfer} {System.out.println(yytext());}
{pgq} {System.out.println(yytext());}
{texte} {System.out.println("txt : "+yytext());}
{comparateurs} {System.out.println(yytext());}
{deuxpoints} {System.out.println(yytext());}
{pgq} {System.out.println(yytext());}
//{alphabet}* {System.out.println(">>alphabet>>"+yytext()+"<<alphabet<<");}
[\ \n\t]* {}

. {System.out.println(">>rejet>>"+yytext()+"<<rejet<<");}

//{erreur_ident} {}
//{erreur_chaine} {}




// qqs exemples de règles lexicales légales...




/*
{entier} { return new Symbol(sym.ENTIER, new Integer(yytext())); }
{ident} { return new Symbol(sym.IDENT, yytext()); }
{espace} {}
{finligne} {} 
*/
// qqs exemples de règles de détection d'erreurs lexicales...
/*
{erreur_ident} {System.out.println(" Erreur ligne "+(yyline+1)+" colonne "+(yycolumn+1)+" : "+yytext()+" => syntaxe identificateur non respectee ! "); }

{erreur_chaine} {System.out.println(" Erreur ligne "+(yyline+1)+" colonne "+(yycolumn+1)+" : "+yytext()+" => fin de chaine attendue ! "); }

.  {System.out.println(" Erreur ligne "+(yyline+1)+" colonne "+(yycolumn+1)+" : "+yytext()+" => caractÃ¨re inconnu ! "); } 

*/
